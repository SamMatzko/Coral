var searchIndex = JSON.parse('{\
"sortery":{"doc":"","t":[5,0,0,0,3,3,11,11,11,11,11,12,0,11,11,12,11,11,12,11,12,11,12,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,5,0,5,5,5,5,5,5,5,5,5,5,5,5],"n":["main","messages","structs","tools","DryRunMessage","ProgressBar","borrow","borrow","borrow_mut","borrow_mut","complete","completed_message","error_messages","from","from","from_file","into","into","message","set_progress","to_file","to_string","total","try_from","try_from","try_into","try_into","type_id","type_id","PathDoesNotExistError","PathMoveFailedError","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","path","source","target","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","ConfigData","File","borrow","borrow","borrow_mut","borrow_mut","copy","date_format","date_type","deserialize","eq","exclude_type","exists","extension","file_name","file_stem","fmt","fmt","from","from","from_json","from_path","from_pathbuf","into","into","join","join_string","ne","new","only_type","pathbuf","preserve_name","serialize","to_path_buf","to_string","try_from","try_from","try_into","try_into","type_id","type_id","extract","sort","get_datetime","get_epoch_secs_access","get_epoch_secs_creation","get_epoch_secs_modified","get_new_date_path","get_sequential_name","get_sorting_results","is_sortable","is_type","sort","sort_dry_run","sort_from_json"],"q":["sortery","","","","sortery::messages","","","","","","","","","","","","","","","","","","","","","","","","","sortery::messages::error_messages","","","","","","","","","","","","","","","","","","","","","sortery::structs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sortery::tools","","sortery::tools::sort","","","","","","","","","","",""],"d":["","","","All the sorting tools used by the command-line interface. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Move all the contents of SOURCE to TARGET, maintaining …","The main sorting algorithm, and all the functions it needs …","Return a <code>DateTime</code> instance representing the creation, …","Return the access date and time of <code>path</code> as the number of …","Return the creation date and time of <code>path</code> as the number of …","Return the modification date and time of <code>path</code> as the …","Move <code>file</code> into a set of directories in yyyy/mm/ format …","Return a <code>File</code> representing the renamed version of <code>path</code>.","The main sorting algorithm; this checks files for validity …","Return <code>true</code> if:","Return <code>true</code> if <code>path</code>’s type is one of the types in <code>types</code>. …","The main sort function used by the command-line interface. …","Print the intended sort, without acutally sorting. Each …","Sort according to configuration data in JSON <code>String</code> <code>json</code>. …"],"i":[0,0,0,0,0,0,1,2,1,2,2,2,0,1,2,1,1,2,2,2,1,1,2,1,2,1,2,1,2,0,0,3,4,3,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,0,0,5,6,5,6,6,5,5,5,6,5,6,6,6,6,5,6,5,6,5,6,6,5,6,6,6,6,6,5,6,5,5,6,6,5,6,5,6,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],null,[[]],[[]],null,[[["usize",15]]],null,[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[],["file",3]],null,null,[[],["result",4]],[[["file",3]],["bool",15]],null,[[],["bool",15]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["string",3]],["configdata",3]],[[["path",3]],["file",3]],[[["pathbuf",3]],["file",3]],[[]],[[]],[[["path",3]],["file",3]],[[["string",3]],["file",3]],[[["file",3]],["bool",15]],[[["str",15]],["file",3]],null,null,null,[[],["result",4]],[[],["pathbuf",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["file",3],["bool",15]]],null,[[["file",3],["str",15]],[["datetime",3,["local"]],["local",3]]],[[["file",3]],["i64",15]],[[["file",3]],["i64",15]],[[["file",3]],["i64",15]],[[["file",3],["str",15],["bool",15]],["file",3]],[[["file",3],["vec",3]],["file",3]],[[["file",3],["str",15],["bool",15]]],[[["file",3]],["bool",15]],[[["file",3],["str",15]],["bool",15]],[[["bool",15],["file",3],["str",15],["bool",15]]],[[["file",3],["str",15],["bool",15]]],[[["string",3],["bool",15],["file",3]]]],"p":[[3,"DryRunMessage"],[3,"ProgressBar"],[3,"PathDoesNotExistError"],[3,"PathMoveFailedError"],[3,"ConfigData"],[3,"File"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};